@inherits LayoutComponentBase

<div class="navbar fixed-top text-white" style="background-color:#2d2d2d">
    <div class="logo">
        <a href="/" class="bg-white">
            <img src="/logo.svg" height="29" />
        </a>
    </div>

    <div class="search-box">
        <div class="input-group">
            <div class="form-outline">
                <input type="search" class="form-control small"
                       @bind-value="@searchText"
                       @bind-value:event="oninput"
                       @onkeypress="@SearchKeyDown"
                       @onfocusout="@OnSearchFocusOut" placeholder="Sözlükte ara" />
            </div>

            <button type="button" class="btn btn-sozluk btn-success"
                    @onclick="@Search"
                    @onfocusout="@OnSearchFocusOut">
                <i class="fa fa-search h-75"></i>
            </button>
        </div>

        @if(showSearchResult)
        {
            <ul class="list-group">
                @foreach(var item in searchResults)
                {
                    <li class="list-group-item">
                        <a @onclick="(async()=>await GoEntry(item.Id))">@item.Subject</a>
                    </li>
                }
            </ul>
        }
    </div>

    <AuthorizeView>
        <Authorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Create Entry" @onclick="@NavigateCreateEntryPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Me" @onclick="@NavigateMePage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Logout" @onclick="@NavigateLogoutPage" />
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Login" @onclick="@NavigateLoginPage" />
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="sub-nav">
        <a class="sub-nav-item active">Bugün</a>
        <a class="sub-nav-item">Gündem</a>
        <a class="sub-nav-item">Debe</a>
        <a class="sub-nav-item">Sorunsallar</a>
        <a class="sub-nav-item">Takip</a>
        <a class="sub-nav-item">Son</a>
        <a class="sub-nav-item">Kenar</a>
        <a class="sub-nav-item">Çaylaklar</a>
    </div>
</div>

<div class="page">
    <div class="sidebar">
        <h5 class="text-white text-center sidebar-heading">@EntriesSubject</h5>

        <a class="more-data" @onclick="@RefreshEntries">Yenile</a>

        <ul class="list-group">
            <EntriesComponent @ref="@entriesComponent" />
        </ul>
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {
    public string EntriesSubject { get; set; } = "Bugün";

    private EntriesComponent entriesComponent;

    private string searchText;
    private bool showSearchResult;
    private List<SearchEntryViewModel> searchResults = new List<SearchEntryViewModel>();

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    IEntryService entryService { get; set; }

    private async Task RefreshEntries()
    {
        await entriesComponent.RefreshList();
    }

    private void NavigateMePage()
    {
        navigationManager.NavigateTo("/me");
    }

    private void NavigateLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        navigationManager.NavigateTo("/logout");
    }

    private void NavigateCreateEntryPage()
    {
        navigationManager.NavigateTo("/createEntry");
    }

    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if(e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100);
        if(showSearchResult)
        {
            showSearchResult = false;
        }
    }

    private async Task Search()
    {
        if(string.IsNullOrEmpty(searchText))
            return;

        searchResults = await entryService.SearcBySubject(searchText);

        showSearchResult = true;

        //searchText = string.Empty;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();

        navigationManager.NavigateTo($"entry/{entryId}");
    }
}